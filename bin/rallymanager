#!/usr/bin/env python3

"""Rally manager."""

import os
import sys
import json
import logging

import synapseclient

from kirallymanager import manager
from kirallymanager.synapse import Synapse

logging.basicConfig()
LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.INFO)

def create_sprint(args):
    """Create a sprint.
    """

    config = json.load(open(args.config))
    manager.create_sprint(rally_number=args.rally_number,
                          sprint_letter=args.sprint_letter,
                          sprint_title=args.title,
                          config=config)

def create_rally(args):
    """Create a rally.
    """

    config = json.load(open(args.config))
    manager.create_rally(rally_number=args.rally_number,
                         rally_title=args.title,
                         config=config)

def get_rallies(args):
    """Get rallies.
    """

    LOGGER.info("Getting rallies.")
    if not args.root_project_id:
        config = json.load(open(args.config))
        root_project_id = config.get("root_project_id", None)
    else:
        root_project_id = args.root_project_id

    data_frame = manager.get_rallies(root_project_id=root_project_id)
    data_frame.to_csv(sys.stdout)

def get_sprints(args):
    """Get sprints.
    """

    if not args.root_project_id:
        config = json.load(open(args.config))
        root_project_id = config.get("root_project_id", None)
    else:
        root_project_id = args.root_project_id

    data_frame = manager.get_sprints(root_project_id=root_project_id,
                                     rally_number=args.rally_number)

    data_frame.to_csv(sys.stdout)

def main():
    """Command line entry point.
    """

    import argparse
    parser = argparse.ArgumentParser()

    parser.add_argument('--config', type=str, default=None,
                        help="Path to KI rallies configuration file")
    parser.add_argument('--root_project_id', type=str, default=None,
                        help="Synapse ID of the root project for administration") # pylint: disable=line-too-long
    parser.add_argument('--synapse_config', type=str,
                        default=synapseclient.client.CONFIG_FILE,
                        help="Path to Synapse configuration file")

    subparsers = parser.add_subparsers(help='sub-command help')

    parser_create_rally = subparsers.add_parser('create-rally',
                                                help='Create rally.')
    parser_create_rally.add_argument('rally_number', type=int,
                                     help="The rally number.")
    parser_create_rally.add_argument('--title', type=str, default=None,
                                     help='The rally title [default: %(default)s]') # pylint: disable=line-too-long
    parser_create_rally.set_defaults(func=create_rally)

    parser_create_sprint = subparsers.add_parser('create-sprint',
                                                 help='Create sprint.')
    parser_create_sprint.add_argument('rally_number', type=int,
                                      help="The rally number.")
    parser_create_sprint.add_argument('sprint_letter', type=str,
                                      help="The sprint letter.")
    parser_create_sprint.add_argument('--title', type=str, default=None,
                                      help='The sprint title [default: %(default)s]') # pylint: disable=line-too-long
    parser_create_sprint.set_defaults(func=create_sprint)

    parser_get_rallies = subparsers.add_parser('get-rallies',
                                               help='Get rallies.')
    parser_get_rallies.set_defaults(func=get_rallies)

    parser_get_sprints = subparsers.add_parser('get-sprints',
                                               help='Get sprints.')
    parser_get_sprints.add_argument('--rally_number', type=int,
                                    help="The rally number [default: %(default)s].", # pylint: disable=line-too-long
                                    default=None)
    parser_get_sprints.set_defaults(func=get_sprints)

    args = parser.parse_args()

    _ = Synapse().client(configPath=os.path.expanduser(args.synapse_config))

    args.func(args)


if __name__ == "__main__":
    main()
